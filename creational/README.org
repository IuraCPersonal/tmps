#+TITLE: DESIGN PATTERNS IN PYTHON
#+AUTHOR: FCIM FAF 203 Cius Iurie

** TABLE OF CONTENTS :toc:
  - [[#abstract-factory][ABSTRACT FACTORY]]
  - [[#builder][BUILDER]]
  - [[#factory-method][FACTORY METHOD]]
  - [[#object-pool][OBJECT POOL]]
  - [[#prototype][PROTOTYPE]]
  - [[#singleton][SINGLETON]]

** [[https://github.com/IuraCPersonal/tmps/tree/main/creational/abstract_factory][ABSTRACT FACTORY]]

Abstract Factory is a creational design pattern, which solves the problem of creating entire product families without specifying their concrete classes.

** [[https://github.com/IuraCPersonal/tmps/tree/main/creational/builder][BUILDER]]

Builder is a creational design pattern, which allows constructing complex objects step by step.

** [[https://github.com/IuraCPersonal/tmps/tree/main/creational/factory_method][FACTORY METHOD]]

Factory method is a creational design pattern which solves the problem of creating product objects without specifying their concrete classes.

** [[https://github.com/IuraCPersonal/tmps/tree/main/creational/object_pool][OBJECT POOL]]

This pattern is used when creating an object is costly (and they are created frequently) but only a few are used at a time. With a Pool we can manage those instances we have as of now by caching them. Now it is possible to skip the costly creation of an object if one is available in the pool.

** [[https://github.com/IuraCPersonal/tmps/tree/main/creational/prototype][PROTOTYPE]]

This patterns aims to reduce the number of classes required by an application. Instead of relying on subclasses it creates objects by copying a prototypical instance at run-time.

** [[https://github.com/IuraCPersonal/tmps/tree/main/creational/singleton][SINGLETON]]

Singleton is a creational design pattern, which ensures that only one object of its kind exists and provides a single point of access to it for any other code.
