#+TITLE: FACTORY METHOD CREATIONAL PATTERN
#+AUTHOR: FCIM FAF 203 Cius Iurie

** TABLE OF CONTENTS :toc:
  - [[#problem][PROBLEM]]
  - [[#solution][SOLUTION]]
  - [[#example][EXAMPLE]]

** PROBLEM

Suppose you are creating a car factory application. The first version of your app can only handle creation of BMWs, so the bulk of your code lives inside the =BMW= class.

After a while, your app becomes popular and people have different tastes. At present your code is coupled to the =BMW= class. Adding a =Mercedes= class into the app would require making changes to the entire codebase. And again, and again for every new car you may decide to add.

As a result, you will end up with pretty nasty code, riddled with conditionals that switch the appâ€™s behavior depending on the class of transportation objects.

** SOLUTION

=The Factory Method= pattern suggests that you replace direct object construction calls with calls to a special /factory/ method. Now we can override the factory method in a subclass and change the class of products being created bt the method.

** EXAMPLE

The Creator class declares the factory method that is supposed to return an
object of a Product class. The Creator's subclasses usually provide the
implementation of this method.

#+begin_src python
class Creator(ABC):
    @abstractmethod
    def create_car(self):
        pass

    def start_car(self) -> str:
        car = self.create_car()

        result = f'Creator: {car.operation()} was created'

        return result
#+end_src

Also note that, despite its name, the Creator's primary responsibility
is not creating products. Usually, it contains some core business logic
that relies on Product objects, returned by the factory method.
Subclasses can indirectly change that business logic by overriding the
factory method and returning a different type of product from it.

Concrete Creators override the factory method in order to change the resulting
product's type.

#+begin_src python
class BMWCreator(Creator):
    def create_car(self) -> Car:
        return BMW()


class MercedesCreator(Creator):
    def create_car(self) -> Car:
        return Mercedes()
#+end_src

The Product interface declares the operations that all concrete products
must implement.

#+begin_src python
class Car(ABC):
    def operation(self) -> str:
        pass
#+end_src

Concrete Products provide various implementations of the Product interface.

#+begin_src python
class BMW(Car):
    def operation(self) -> str:
        return "{This is a BMW}"


class Mercedes(Car):
    def operation(self) -> str:
        return "{This is a Mercedes}"
#+end_src

The client code works with an instance of a concrete creator, albeit through
its base interface. As long as the client keeps working with the creator via
the base interface, you can pass it any creator's subclass.

#+begin_src python
def client_code(creator: Creator) -> None:
    print(f"Client: {creator.start_car()}", end="")
#+end_src

#+begin_src python
if __name__ == '__main__':
    print("App: BMW Factory Starts...")
    client_code(BMWCreator())

    print("\n")

    print("App: Mercedes Factory Starts...")
    client_code(MercedesCreator())
#+end_src
